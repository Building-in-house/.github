name: Update Org README Projects

on:
  schedule:
    # Runs daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering from the Actions tab
  push:
    branches:
      - main # Or your default branch for the .github repo
    paths:
      # Rerun if the workflow file itself changes
      - '.github/workflows/update-readme.yml'
      # Rerun if the script changes (optional, if using a separate script file)
      # - 'scripts/update_projects.py'

permissions:
  contents: write # Allow workflow to commit changes to the repo

jobs:
  update_projects:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests python-dotenv # requests for API calls

      - name: Fetch Repo Data & Update README
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in token
          ORG_NAME: ${{ github.repository_owner }} # Automatically get org name
        run: |
          import os
          import requests
          import re
          from datetime import datetime

          # --- Configuration ---
          ORG = os.environ['ORG_NAME']
          # !!! LIST YOUR FEATURED REPO NAMES HERE !!!
          FEATURED_REPOS = [
              "coba-synthesis-engine",
              "gnn-accelerator",
              "Your-Software-Project-Repo-Name", # Replace with actual repo names
              ".github"
              # Add other repo names you want to feature
          ]
          README_PATH = ".github/profile/README.md"
          START_MARKER = "<!-- START_FEATURED_PROJECTS -->"
          END_MARKER = "<!-- END_FEATURED_PROJECTS -->"
          # --- End Configuration ---

          token = os.environ.get('GITHUB_TOKEN')
          headers = {"Authorization": f"token {token}"} if token else {}
          markdown_list = []

          print(f"Fetching data for org: {ORG}")
          print(f"Featured repos: {FEATURED_REPOS}")

          for repo_name in FEATURED_REPOS:
              api_url = f"https://api.github.com/repos/{ORG}/{repo_name}"
              try:
                  response = requests.get(api_url, headers=headers)
                  response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
                  repo_data = response.json()

                  name = repo_data.get('name', repo_name)
                  description = repo_data.get('description', 'No description available.')
                  html_url = repo_data.get('html_url', f'https://github.com/{ORG}/{repo_name}')
                  # Optional: Get stars/forks
                  # stars = repo_data.get('stargazers_count', 0)
                  # forks = repo_data.get('forks_count', 0)

                  # Format the markdown line for this repo
                  markdown_list.append(f"*   **[{name}]({html_url}):** {description if description else 'No description available.'}")
                  print(f"  ✓ Fetched {name}")

              except requests.exceptions.RequestException as e:
                  print(f"  ✗ ERROR fetching {repo_name}: {e}")
                  # Optionally, still add a basic link if fetch fails
                  markdown_list.append(f"*   **[{repo_name}](https://github.com/{ORG}/{repo_name}):** Error fetching details.")
              except Exception as e:
                  print(f"  ✗ UNEXPECTED ERROR for {repo_name}: {e}")
                  markdown_list.append(f"*   **[{repo_name}](https://github.com/{ORG}/{repo_name}):** Unexpected error.")


          if not markdown_list:
              print("No projects fetched or configured.")
              project_content = "*   No projects to display currently."
          else:
              project_content = "\n".join(markdown_list)

          try:
              with open(README_PATH, 'r', encoding='utf-8') as f:
                  readme_content = f.read()

              # Use regex to replace content between markers
              pattern = re.compile(f"{re.escape(START_MARKER)}(.*?){re.escape(END_MARKER)}", re.DOTALL)
              new_readme_content = pattern.sub(f"{START_MARKER}\n{project_content}\n{END_MARKER}", readme_content, count=1)

              if new_readme_content == readme_content:
                  print("README content is already up-to-date. No changes needed.")
              else:
                  print("Updating README file...")
                  with open(README_PATH, 'w', encoding='utf-8') as f:
                      f.write(new_readme_content)
                  print("README file updated successfully.")

          except FileNotFoundError:
              print(f"ERROR: README file not found at {README_PATH}")
          except Exception as e:
              print(f"ERROR processing README file: {e}")

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Auto-update featured projects in README"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          file_pattern: ".github/profile/README.md" # Only commit if README changed
          commit_options: '--no-verify' # Skip pre-commit hooks if any
